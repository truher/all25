plugins {
    id "java"
    id "edu.wpi.first.GradleRIO2027" version "2027.0.0-alpha-1"
}

sourceSets {
    main {
        java {
            srcDir "../lib/src/main/java"
        }
    }
}

java {
    sourceCompatibility = JavaVersion.VERSION_17
    targetCompatibility = JavaVersion.VERSION_17
}

def ROBOT_MAIN_CLASS = "org.team100.frc2025.Main"

// Define my targets (RoboRIO) and artifacts (deployable files)
// This is added by GradleRIO's backing project DeployUtils.
deploy {
    targets {
        systemcore(getTargetTypeClass('SystemCore')) {
            team = project.frc.getTeamNumber()
            debug = project.frc.getDebugOrDefault(false)

            artifacts {
                frcJava(getArtifactTypeClass('FRCJavaArtifact')) {
                    ////////////////////////////////////////
                    //
                    // for more on jvm args, see https://docs.oracle.com/en/java/javase/17/docs/specs/man/java.html
                    //
                    // PROFILING with VisualVM JMX
                    //
                    // COMMENT THIS OUT FOR COMP
                    //
                    // jvmArgs.add("-Dcom.sun.management.jmxremote=true")
                    // jvmArgs.add("-Dcom.sun.management.jmxremote.port=1198")
                    // jvmArgs.add("-Dcom.sun.management.jmxremote.local.only=false")
                    // jvmArgs.add("-Dcom.sun.management.jmxremote.ssl=false")
                    // jvmArgs.add("-Dcom.sun.management.jmxremote.authenticate=false")
                    // for ethernet
                    // jvmArgs.add("-Djava.rmi.server.hostname=10.1.0.2")
                    // for USB
                    // jvmArgs.add("-Djava.rmi.server.hostname=172.22.11.2")
                    //
                    // end profiling
                    ////////////////////////////////////////
                    //
                    // PERFORMANCE
                    //
                    // see https://github.com/Mechanical-Advantage/AdvantageKit/blob/b81ea6295dc903fc0688ecc6dd278c771c9bce7a/template_projects/template/build.gradle#L32
                    //
                    // jvmArgs.add("-XX:+UnlockExperimentalVMOptions")
                    // jvmArgs.add("-XX:GCTimeRatio=5")
                    // This is actually the default
                    // jvmArgs.add("-XX:+UseSerialGC")
                    // jvmArgs.add("-XX:MaxGCPauseMillis=50")
                    //
                    // We want everything compiled, as early as possible.  Not sure which of these will work
                    // jvmArgs.add("-XX:CompileThreshold=1") // JVM 8
                    // jvmArgs.add("-XX:CompileThresholdScaling=0.01") // JVM 17
                    // Don't compile in the background, since we have few threads, and want this done fast.
                    // This doesn't seem to help
                    // jvmArgs.add("-XX:-BackgroundCompilation")
                    // Spam the console.
                    // This makes an intolerable amount of output.
                    // jvmArgs.add("-XX:+PrintCompilation")
                    //
                    // end performance
                    ////////////////////////////////////////
                }

                // Static files artifact
                frcStaticFileDeploy(getArtifactTypeClass('FileTreeArtifact')) {
                    files = project.fileTree('src/main/deploy')
                    directory = '/home/systemcore/deploy'
                    deleteOldFiles = false // Change to true to delete files on roboRIO that no
                                           // longer exist in deploy directory of this project
                }
            }
        }
    }
}

def deployArtifact = deploy.targets.systemcore.artifacts.frcJava

// Set to true to use debug for JNI.
wpi.java.debugJni = false

// Set this to true to enable desktop support.
def includeDesktopSupport = true

// Defining my dependencies. In this case, WPILib (+ friends), and vendor libraries.
// Also defines JUnit 5.
dependencies {
    annotationProcessor wpi.java.deps.wpilibAnnotations()
    implementation wpi.java.deps.wpilib()
    implementation wpi.java.vendor.java()

    systemcoreDebug wpi.java.deps.wpilibJniDebug(wpi.platforms.systemcore)
    systemcoreDebug wpi.java.vendor.jniDebug(wpi.platforms.systemcore)

    systemcoreRelease wpi.java.deps.wpilibJniRelease(wpi.platforms.systemcore)
    systemcoreRelease wpi.java.vendor.jniRelease(wpi.platforms.systemcore)

    nativeDebug wpi.java.deps.wpilibJniDebug(wpi.platforms.desktop)
    nativeDebug wpi.java.vendor.jniDebug(wpi.platforms.desktop)
    simulationDebug wpi.sim.enableDebug()

    nativeRelease wpi.java.deps.wpilibJniRelease(wpi.platforms.desktop)
    nativeRelease wpi.java.vendor.jniRelease(wpi.platforms.desktop)
    simulationRelease wpi.sim.enableRelease()

    testImplementation 'org.junit.jupiter:junit-jupiter:5.10.1'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

test {
    useJUnitPlatform()
    systemProperty 'junit.jupiter.extensions.autodetection.enabled', 'true'
}

// Simulation configuration (e.g. environment variables).
wpi.sim.addGui().defaultEnabled = true
wpi.sim.addDriverstation()

// Setting up my Jar File. In this case, adding all libraries into the main jar ('fat jar')
// in order to make them all available at runtime. Also adding the manifest so WPILib
// knows where to look for our Robot Class.
jar {
    from { configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) } }
    from sourceSets.main.allSource
    manifest edu.wpi.first.gradlerio.GradleRIOPlugin.javaManifest(ROBOT_MAIN_CLASS)
    duplicatesStrategy = DuplicatesStrategy.INCLUDE
}

// Configure jar and deploy tasks
deployArtifact.jarTask = jar
wpi.java.configureExecutableTasks(jar)
wpi.java.configureTestTasks(test)

// Configure string concat to always inline compile
tasks.withType(JavaCompile) {
    options.compilerArgs.add '-XDstringConcat=inline'
}
